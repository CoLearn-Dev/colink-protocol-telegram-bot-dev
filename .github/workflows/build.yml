on:
  release:
    types: [released]

name: Build

env:
  PROTOCOL_NAME: telegram_bot
  PACKAGE_NAME: colink-protocol-telegram-bot

jobs:
  build:
    strategy:
      matrix:
        platform: [linux-x86_64, macos-x86_64]
        include:
          - platform: linux-x86_64
            ci_image: ubuntu-20.04
            cargo_target: x86_64-unknown-linux-gnu
            sed_command: sed
          - platform: macos-x86_64
            ci_image: macos-12
            cargo_target: x86_64-apple-darwin
            sed_command: gsed
    runs-on: ${{ matrix.ci_image }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Build
        run: cargo build --release --target ${{ matrix.cargo_target }}
      - name: Install sed
        if: ${{ startsWith(matrix.ci_image, 'macos') }}
        run: brew install gnu-sed
      - name: Pack
        run: |
          ${{ matrix.sed_command }} -i '/^entrypoint =/centrypoint = "./${{ env.PACKAGE_NAME }}"' colink.toml
          cp target/${{ matrix.cargo_target }}/release/${{ env.PACKAGE_NAME }} ./
          tar -zcvf ${{ env.PACKAGE_NAME }}-${{ matrix.platform }}.tar.gz ${{ env.PACKAGE_NAME }} colink.toml
      - name: Upload Release Asset
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs').promises;
            github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              name: '${{ env.PACKAGE_NAME }}-${{ matrix.platform }}.tar.gz',
              data: await fs.readFile('${{ env.PACKAGE_NAME }}-${{ matrix.platform }}.tar.gz')
            });

  update-inventory:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [ build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}
      - name: Commit Hash
        id: commit_hash
        run: echo "commit_hash=`git rev-parse HEAD`" >> $GITHUB_OUTPUT
      - name: Sha256
        id: sha256
        run: |
          export platform=linux-x86_64
          wget ${{ github.event.repository.html_url }}/releases/download/${{ github.event.release.tag_name }}/${{ env.PACKAGE_NAME }}-$platform.tar.gz
          echo "sha256-$platform=`shasum -a 256 ${{ env.PACKAGE_NAME }}-$platform.tar.gz | awk '{ print $1 }'`" >> $GITHUB_OUTPUT
          export platform=macos-x86_64
          wget ${{ github.event.repository.html_url }}/releases/download/${{ github.event.release.tag_name }}/${{ env.PACKAGE_NAME }}-$platform.tar.gz
          echo "sha256-$platform=`shasum -a 256 ${{ env.PACKAGE_NAME }}-$platform.tar.gz | awk '{ print $1 }'`" >> $GITHUB_OUTPUT
      - name: Generate
        run: |
          cp inventory-template.toml ${{ env.PROTOCOL_NAME }}.toml
          sed -i 's#{{source.git.url}}#${{ github.event.repository.clone_url }}#' ${{ env.PROTOCOL_NAME }}.toml
          sed -i 's#{{source.git.commit}}#${{ steps.commit_hash.outputs.commit_hash }}#' ${{ env.PROTOCOL_NAME }}.toml
          sed -i 's#{{binary.linux-x86_64.url}}#${{ github.event.repository.html_url }}/releases/download/${{ github.event.release.tag_name }}/${{ env.PACKAGE_NAME }}-linux-x86_64.tar.gz#' ${{ env.PROTOCOL_NAME }}.toml
          sed -i 's#{{binary.linux-x86_64.sha256}}#${{ steps.sha256.outputs.sha256-linux-x86_64 }}#' ${{ env.PROTOCOL_NAME }}.toml
          sed -i 's#{{binary.macos-x86_64.url}}#${{ github.event.repository.html_url }}/releases/download/${{ github.event.release.tag_name }}/${{ env.PACKAGE_NAME }}-macos-x86_64.tar.gz#' ${{ env.PROTOCOL_NAME }}.toml
          sed -i 's#{{binary.macos-x86_64.sha256}}#${{ steps.sha256.outputs.sha256-macos-x86_64 }}#' ${{ env.PROTOCOL_NAME }}.toml
      - name: SSH Agent
        run: |
          eval `ssh-agent`
          ssh-add - <<< "${{ secrets.SSH_KEY }}"
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
      - name: Clone inventory repository
        run: git clone git@github.com:CoLearn-Dev/colink-protocol-inventory.git
      - name: Copy
        run: cp ${{ env.PROTOCOL_NAME }}.toml colink-protocol-inventory/protocols/
      - name: Set pusher
        run: |
          git config --global user.email "104302037+colearn-dev-bot@users.noreply.github.com"
          git config --global user.name "colearn-dev-bot"
      - name: Add
        working-directory: ./colink-protocol-inventory
        run: git add protocols/${{ env.PROTOCOL_NAME }}.toml
      - name: Commit
        working-directory: ./colink-protocol-inventory
        run: git commit -m "Update ${{ env.PROTOCOL_NAME }}"
      - name: Push
        working-directory: ./colink-protocol-inventory
        run: git push
